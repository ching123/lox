program        ¡ú declaration* EOF ;

declaration    ¡ú classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      ¡ú "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" function* "}" ;
funDecl        ¡ú "fun" function ;
function       ¡ú IDENTIFIER "(" parameters? ")" block ;

varDecl        ¡ú "var" IDENTIFIER ( "=" expression )? ";" ;

statement      ¡ú exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | returnStmt
               | whileStmt
               | block ;


exprStmt       ¡ú expression ";" ;
forStmt        ¡ú "for" "(" ( varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement ;
ifStmt         ¡ú "if" "(" expression ")" statement
               ( "else" statement )? ;
returnStmt     ¡ú "return" expression? ";" ;
printStmt      ¡ú "print" expression ";" ;
whileStmt      ¡ú "while" "(" expression ")" statement ;
parameters     ¡ú IDENTIFIER ( "," IDENTIFIER )* ;
block          ¡ú "{" declaration* "}" ;

#expression     ¡ú equality ;
expression     ¡ú assignment ;
assignment     ¡ú ( call "." )? IDENTIFIER "=" assignment
               | logic_or ;
logic_or       ¡ú logic_and ( "or" logic_and )* ;
logic_and      ¡ú equality ( "and" equality )* ;
equality       ¡ú comparison(( "!=" | "==" ) comparison )* ;
comparison     ¡ú term(( ">" | ">=" | "<" | "<=" ) term )* ;
term           ¡ú factor(( "-" | "+" ) factor )* ;
factor         ¡ú unary(( "/" | "*" ) unary )* ;
unary          ¡ú ( "!" | "-" ) unary | call ;
call           ¡ú primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        ¡ú "true" | "false" | "nil" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER ;

arguments      ¡ú expression ( "," expression )* ;